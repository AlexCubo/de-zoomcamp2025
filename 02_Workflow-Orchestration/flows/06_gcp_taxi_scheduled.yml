id: 06_gcp_taxi_scheduled
namespace: zoomcamp2025
description: |
  The CSV Data used in the course: https://github.com/DataTalksClub/nyc-tlc-data/releases

concurrency:
  limit: 1  

inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: ['green', 'yellow']
    defaults: 'yellow'

variables:
  file: "{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy-MM')}}.csv"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy-MM')}}"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ (trigger.date | date('yyyy-MM'))  ~ '.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{ inputs.taxi }}"
 
  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
       - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz |
        gunzip > {{render(vars.file)}}
 
  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"

  - id: print_vars
    type: io.kestra.plugin.core.debug.Return
    format: "{{ kv('GCP_PROJECT_NAME') }}"

  - id: if_green
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi == 'green' }}"
    then:
      - id: bq_green_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
            CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_NAME')}}.{{kv('GCP_DATASET')}}.green_tripdata` (
            unique_row_id           BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing trip attributes.'),
            filename                STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),
            VendorID                STRING OPTIONS (description = 'A code indicating the TPEP provider of the records. 1=Creative Mobile Technologies; 2=VeriFone Inc.'),
            lpep_pickup_datetime    TIMESTAMP OPTIONS (description= 'The date and time when the meter was engaged.'),
            lpep_dropoff_datetime   TIMESTAMP OPTIONS (description= 'The date and time when the meter was disengaged.'),
            store_and_fwd_flag      STRING  OPTIONS (description= 'This flag indicates whether the trip record was held in vehicle memory efore sending to the vendor. aka "store and forward", because the vehicle did not have a connection to the server. Y=Yes; N=No'),
            RatecodeID              STRING  OPTIONS (description = 'The final rate code in effect at the end of the trip. 1=standard rate; 2=JFK; 3=Newark; 4=Nassau or Westchester; 5=Negotiated fare; 6=Group ride.'),    
            PULocationID            STRING  OPTIONS (description= 'TLC taxi zone in which the meter was engaged.'),
            DOLocationID            STRING  OPTIONS (description= 'TLC taxi zone in which the meter was disengaged.'),
            passenger_count         INT64 OPTIONS (description= 'The number of passengers in vehicle. This is a driver-entered value.'),
            trip_distance           NUMERIC OPTIONS (description= 'The elapsed trip distance in miles reported on the taximeter'),
            fare_amount             NUMERIC OPTIONS (description= 'The time and distance fare calculated by the meter.'),                   
            extra                   NUMERIC OPTIONS (description= 'Miscellaneous extras and surcharges. Currently this only included the $0.50 and $1 rush hours and overnight charges.'),              
            mta_tax                 NUMERIC OPTIONS (description= '$0.50 MTA tax that is automatically triggered based on the metered rate n use.'),    
            tip_amount              NUMERIC OPTIONS (description= 'Tip amount. This field is automatically populated for credit cards tips. Cash tips are not included.'),    
            tolls_amount            NUMERIC OPTIONS (description= 'Total amount of all tolls paid in trips.'),
            ehail_fee               NUMERIC,
            improvement_surcharge   NUMERIC OPTIONS (description= '$0.30 inprovement surcharge assessed on hailed trips and the flag drop. he improvement surcharge began being levied in 2015.'),
            total_amount            NUMERIC OPTIONS (description= 'The total amount charged to passengers. Does not include cash tips.'),
            payment_type            INTEGER OPTIONS (description= 'A numeric code signifying how the passenger paid for the trip. 1=credit ard; 2=cash; 3= no charge; 4=dispute; 5=unknown; 6=voided trip.'),  
            trip_type               STRING OPTIONS (description= 'A code indicating whether the trip was a street-hail or a dispatch that s automatically assigned based on the metered rate in use but can be altered by the driver.'),
            congestion_surcharge    NUMERIC OPTIONS (description= 'Congestion surcharge applied in congested zones.')
            )
            PARTITION BY DATE(lpep_pickup_datetime);


      - id: green_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_NAME')}}.{{render(vars.table)}}_ext`
          (
              VendorID                STRING OPTIONS (description = 'A code indicating the TPEP provider of the records. 1=Creative Mobile Technologies; 2=VeriFone Inc.'),
              lpep_pickup_datetime    TIMESTAMP OPTIONS (description= 'The date and time when the meter was engaged.'),
              lpep_dropoff_datetime   TIMESTAMP OPTIONS (description= 'The date and time when the meter was disengaged.'),
              store_and_fwd_flag      STRING  OPTIONS (description= 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor. aka "store and forward", because the vehicle did not have a connection to the server. Y=Yes; N=No'),
              RatecodeID              STRING  OPTIONS (description = 'The final rate code in effect at the end of the trip. 1=standard rate; 2=JFK; 3=Newark; 4=Nassau or Westchester; 5=Negotiated fare; 6=Group ride.'),    
              PULocationID            STRING  OPTIONS (description= 'TLC taxi zone in which the meter was engaged.'),
              DOLocationID            STRING  OPTIONS (description= 'TLC taxi zone in which the meter was disengaged.'),
              passenger_count         INT64 OPTIONS (description= 'The number of passengers in vehicle. This is a driver-entered value.'),
              trip_distance           NUMERIC OPTIONS (description= 'The elapsed trip distance in miles reported on the taximeter'),
              fare_amount             NUMERIC OPTIONS (description= 'The time and distance fare calculated by the meter'),                   
              extra                   NUMERIC OPTIONS (description= 'Miscellaneous extras and surcharges. Currently this only included the $0.50 and $1 rush hours and overnight charges.'),              
              mta_tax                 NUMERIC OPTIONS (description= '$0.50 MTA tax that is automatically triggered based on the metered rate in use.'),    
              tip_amount              NUMERIC OPTIONS (description= 'Tip amount. This field is automatically populated for credit cards tips. Cash tips are not included.'),    
              tolls_amount            NUMERIC OPTIONS (description= 'Total amount of all tolls paid in trips.'),
              ehail_fee               NUMERIC,
              improvement_surcharge   NUMERIC OPTIONS (description= '$0.30 inprovement surcharge assessed on hailed trips and the flag drop. The improvement surcharge began being levied in 2015.'),
              total_amount            NUMERIC OPTIONS (description= 'The total amount charged to passengers. Does not include cash tips.'),
              payment_type            INTEGER OPTIONS (description= 'A numeric code signifying how the passenger paid for the trip. 1=credit card; 2=cash; 3= no charge; 4=dispute; 5=unknown; 6=voided trip.'),  
              trip_type               STRING OPTIONS (description= 'A code indicating whether the trip was a street-hail or a dispatch that is automatically assigned based on the metered rate in use but can be altered by the driver.'),
              congestion_surcharge    NUMERIC OPTIONS (description= 'Congestion surcharge applied in congested zones.')
          )
          OPTIONS (
            format = 'CSV',
            uris = ['{{render(vars.gcs_file)}}'],
            skip_leading_rows = 1,
            ignore_unknown_values = TRUE
          );

      - id:  bq_green_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_NAME')}}.{{render(vars.table)}}`
            AS 
            SELECT
              MD5 (CONCAT(
                COALESCE(CAST(VendorID AS STRING), ""),
                COALESCE(CAST(lpep_pickup_datetime AS STRING), ""),
                COALESCE(CAST(lpep_dropoff_datetime AS STRING), ""),
                COALESCE(CAST(PULocationID AS STRING), ""),
                COALESCE(CAST(DOLocationID AS STRING), "")
                )) AS unique_row_id,
              "{{render(vars.file)}}" AS filename,
              *
            FROM `{{kv('GCP_PROJECT_NAME')}}.{{render(vars.table)}}_ext`;       

      - id: bq_green_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_NAME')}}.{{kv('GCP_DATASET')}}.green_tripdata` T
          USING `{{kv('GCP_PROJECT_NAME')}}.{{render(vars.table)}}`S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (
                  unique_row_id,
                  filename,
                  VendorID,
                  lpep_pickup_datetime,
                  lpep_dropoff_datetime,
                  store_and_fwd_flag,
                  RatecodeID,
                  PULocationID,
                  DOLocationID,
                  passenger_count,
                  trip_distance,
                  fare_amount,
                  extra,
                  mta_tax,
                  tip_amount,
                  tolls_amount,
                  ehail_fee,
                  improvement_surcharge,
                  total_amount,
                  payment_type,
                  trip_type,
                  congestion_surcharge)
            VALUES (
                  S.unique_row_id,
                  S.filename,
                  S.VendorID,
                  S.lpep_pickup_datetime,
                  S.lpep_dropoff_datetime,
                  S.store_and_fwd_flag,
                  S.RatecodeID,
                  S.PULocationID,
                  S.DOLocationID,
                  S.passenger_count,
                  S.trip_distance,
                  S.fare_amount,
                  S.extra,
                  S.mta_tax,
                  S.tip_amount,
                  S.tolls_amount,
                  S.ehail_fee,
                  S.improvement_surcharge,
                  S.total_amount,
                  S.payment_type,
                  S.trip_type,
                  S.congestion_surcharge);


  - id: if_yellow
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi == 'yellow' }}"
    then:
      - id: bq_yellow_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_NAME')}}.{{kv('GCP_DATASET')}}.yellow_tripdata` (
            unique_row_id           BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing trip attributes.'),
            filename                STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),
            VendorID                STRING OPTIONS (description = 'A code indicating the TPEP provider of the records. 1=Creative Mobile Technologies; 2=VeriFone Inc.'),
            tpep_pickup_datetime    TIMESTAMP OPTIONS (description= 'The date and time when the meter was engaged.'),
            tpep_dropoff_datetime   TIMESTAMP OPTIONS (description= 'The date and time when the meter was disengaged.'),
            passenger_count         INT64 OPTIONS (description= 'The number of passengers in vehicle. This is a driver-entered value.'),
            trip_distance           NUMERIC OPTIONS (description= 'The elapsed trip distance in miles reported on the taximeter'),
            RatecodeID              STRING  OPTIONS (description = 'The final rate code in effect at the end of the trip. 1=standard rate; =JFK; 3=Newark; 4=Nassau or Westchester; 5=Negotiated fare; 6=Group ride.'),
            store_and_fwd_flag      STRING  OPTIONS (description= 'This flag indicates whether the trip record was held in vehicle memory efore sending to the vendor. aka "store and forward", because the vehicle did not have a connection to the server. Y=Yes; N=No'),
            PULocationID            STRING  OPTIONS (description= 'TLC taxi zone in which the meter was engaged.'),,
            DOLocationID            STRING  OPTIONS (description= 'TLC taxi zone in which the meter was disengaged.'),
            payment_type            INTEGER OPTIONS (description= 'A numeric code signifying how the passenger paid for the trip. 1=credit ard; 2=cash; 3= no charge; 4=dispute; 5=unknown; 6=voided trip.'),
            fare_amount             NUMERIC OPTIONS (description= 'The time and distance fare calculated by the meter.'),         
            extra                   NUMERIC OPTIONS (description= 'Miscellaneous extras and surcharges. Currently this only included the $0.0 and $1 rush hours and overnight charges.'),               
            mta_tax                 NUMERIC OPTIONS (description= '$0.50 MTA tax that is automatically triggered based on the metered rate n use.'),   
            tip_amount              NUMERIC OPTIONS (description= 'Tip amount. This field is automatically populated for credit cards tips. ash tips are not included.'),    
            tolls_amount            NUMERIC OPTIONS (description= 'Total amount of all tolls paid in trips.'),
            improvement_surcharge   NUMERIC OPTIONS (description= '$0.30 inprovement surcharge assessed on hailed trips and the flag drop. The improvement surcharge began being levied in 2015.'),
            total_amount            NUMERIC OPTIONS (description= 'The total amount charged to passengers. Does not include cash tips.'),
            congestion_surcharge    NUMERIC OPTIONS (description= 'Congestion surcharge applied in congested zones.')
          )
          PARTITION BY DATE(tpep_pickup_datetime);

      - id: bq_yellow_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_NAME')}}.{{render(vars.table)}}_ext` (
              VendorID                STRING OPTIONS (description = 'A code indicating the TPEP provider of the records. 1=Creative Mobile Technologies; 2=VeriFone Inc.'),
              tpep_pickup_datetime    TIMESTAMP OPTIONS (description= 'The date and time when the meter was engaged.'),
              tpep_dropoff_datetime   TIMESTAMP OPTIONS (description= 'The date and time when the meter was disengaged.'),
              passenger_count         INT64 OPTIONS (description= 'The number of passengers in vehicle. This is a driver-entered value.'),
              trip_distance           NUMERIC OPTIONS (description= 'The elapsed trip distance in miles reported on the taximeter'),
              RatecodeID              STRING  OPTIONS (description = 'The final rate code in effect at the end of the trip. 1=standard rate; =JFK; 3=Newark; 4=Nassau or Westchester; 5=Negotiated fare; 6=Group ride.'),
              store_and_fwd_flag      STRING  OPTIONS (description= 'This flag indicates whether the trip record was held in vehicle memory efore sending to the vendor. aka "store and forward", because the vehicle did not have a connection to the server. Y=Yes; N=No'),
              PULocationID            STRING  OPTIONS (description= 'TLC taxi zone in which the meter was engaged.'),,
              DOLocationID            STRING  OPTIONS (description= 'TLC taxi zone in which the meter was disengaged.'),
              payment_type            INTEGER OPTIONS (description= 'A numeric code signifying how the passenger paid for the trip. 1=credit ard; 2=cash; 3= no charge; 4=dispute; 5=unknown; 6=voided trip.'),
              fare_amount             NUMERIC OPTIONS (description= 'The time and distance fare calculated by the meter.'),         
              extra                   NUMERIC OPTIONS (description= 'Miscellaneous extras and surcharges. Currently this only included the $0.0 and $1 rush hours and overnight charges.'),               
              mta_tax                 NUMERIC OPTIONS (description= '$0.50 MTA tax that is automatically triggered based on the metered rate n use.'),   
              tip_amount              NUMERIC OPTIONS (description= 'Tip amount. This field is automatically populated for credit cards tips. ash tips are not included.'),    
              tolls_amount            NUMERIC OPTIONS (description= 'Total amount of all tolls paid in trips.'),
              improvement_surcharge   NUMERIC OPTIONS (description= '$0.30 inprovement surcharge assessed on hailed trips and the flag drop. he improvement surcharge began being levied in 2015.'),
              total_amount            NUMERIC OPTIONS (description= 'The total amount charged to passengers. Does not include cash tips.'),
              congestion_surcharge    NUMERIC OPTIONS (description= 'Congestion surcharge applied in congested zones.')
          )
          OPTIONS (
            format = 'CSV',
            uris = ['{{render(vars.gcs_file)}}'],
            skip_leading_rows = 1,
            ignore_unknown_values = TRUE
            );

      - id:  bq_yellow_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_NAME')}}.{{render(vars.table)}}` 
          AS 
          SELECT
            MD5 (CONCAT(
              COALESCE(CAST(VendorID AS STRING), ""),
              COALESCE(CAST(tpep_pickup_datetime AS STRING), ""),
              COALESCE(CAST(tpep_dropoff_datetime AS STRING), ""),
              COALESCE(CAST(PULocationID AS STRING), ""),
              COALESCE(CAST(DOLocationID AS STRING), "")
              )) AS unique_row_id,
            "{{render(vars.file)}}" AS filename,
            *
            FROM `{{kv('GCP_PROJECT_NAME')}}.{{render(vars.table)}}_ext`;

      - id: bq_yellow_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_NAME')}}.{{kv('GCP_DATASET')}}.yellow_tripdata` AS T
          USING `{{kv('GCP_PROJECT_NAME')}}.{{render(vars.table)}}`AS S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN 
           INSERT (
                 unique_row_id,
                  filename,
                  VendorID,
                  tpep_pickup_datetime,
                  tpep_dropoff_datetime,
                  passenger_count,      
                  trip_distance,        
                  RatecodeID,           
                  store_and_fwd_flag,   
                  PULocationID,         
                  DOLocationID,         
                  payment_type,         
                  fare_amount,          
                  extra,                
                  mta_tax,              
                  tip_amount,           
                  tolls_amount,         
                  improvement_surcharge,
                  total_amount,
                  congestion_surcharge)
              VALUES (
                  S.unique_row_id,
                  S.filename,
                  S.VendorID,
                  S.tpep_pickup_datetime,
                  S.tpep_dropoff_datetime,
                  S.passenger_count,
                  S.trip_distance,
                  S.RatecodeID,
                  S.store_and_fwd_flag,
                  S.PULocationID,
                  S.DOLocationID,
                  S.payment_type,
                  S.fare_amount,
                  S.extra,
                  S.mta_tax,
                  S.tip_amount,
                  S.tolls_amount,
                  S.improvement_surcharge,
                  S.total_amount,
                  S.congestion_surcharge);

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_NAME')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

triggers:
  - id: green_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"
    inputs: 
      taxi: green

  - id: yellow_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 10 1 * *"
    inputs:
      taxi: yellow


